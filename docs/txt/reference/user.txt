Support to access and manage User.

_dict_diff(new, old)
	Healper function to compare two dict and get the difference between old
	and new.

class User()
	Class to access and manage user. Each instance represents a registered
	user and is constructed from information returned by successful
	authentication.

	**kwarg
		keyword arguments of user's information

	UPDATABLE_ATTRIBUTES
		A list of keys for user attributes that can be updated in the Auth0
		server through the Management API.

	__bool__()
		Returns true if a sub, an access token, and an ID token exist in an
		instance. The existence of those properties indicates a registered
		user.

	__eq__(__user)
		This method compares the current user object with another user object
		to determine if they represent the same user.

		__user
			User to compare with.

	property id
		Returns the unique ID of the user ("sub", in the OIDC terminology).

	property db
		Retrieves and returns the user's database record by invoking the
		specified database backend.

		By default, USER_DB_BACKEND is used as the database backend.
		
		See user_object documentation for details.
	
	set_db_backend(_db_backend)
		Sets a database backend for a User instance.

		By default, the USER_DB_BACKEND is used to retrieve the database record
		of a User. This method sets a different database backend for a User
		instance.

		_db_backend
			User Database Backend to set.
		
	
	valid_user_key(key)
		Returns whether or not the key is a valid user attribute key
		recognized by the Auth0 Management API.

		key
			key to check.
		

	validate_user_dict(data)
		Validates a dict of user data against the list of valid user
		attribute keys. If any invalid key is present, an AuthEngineError
		exception is raised.

		data
			dict of user data to validate

	to_dict()
		Returns a dict consisting of the Auth0 Management API specific user
		attributes.
	
	changed_user_data()
		Returns a dict containing the user attributes that has been changed
		since the instance creation or last update.

	update(data = None)
		Updates user attributes on the Auth0 server. It validates the
		provided data before updating. If no data is provided, it automatically
		detects which fields have been changed and updates only those fields.
		Returns an AuthEngineError instance if unable to update.

		data
			dict containing the attributes to be updated.
