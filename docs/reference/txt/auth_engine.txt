class AuthVerifierEngine(issuer, jwks_url, audience, algorithms)
	A wrapper of auth0.authentication.token_verifier.TokenVerifier. The
	auth0.authentication.token_verifier.TokenVerifier.verify  function is used
	to validate id tokens.

class AuthEngine
	AuthEngine class facilitate with user authentication using Auth0 Python
	SDK. It interacts with Auth0 endpoints to perform user authentication and
	is compatible with various Django built-in modules and objects, including
	the HttpRequest object. Most methods accept an optional HttpRequest object.
	Successful authentication updates or creates session cookies in the
	HttpRequest for future requests.

	AuthEngine relies on several key pieces of information from the Django
	project's settings to function: the Auth0 application's client ID and
	client secret, the tenant domain, and the API audience. If any of these
	required pieces of information are missing, an error will be raised.

	Each AuthEngine object has these attributes:

	AuthEngine.BACKEND_NAME.
		String representing the name of the backend. Default is,
		"django_auth0_engine.engine.AuthEngine"

	AuthEngine.USERNAME_PASSWORD_REALM
		String representing the Username-Password-Authentication realm of auth0.

	class AuthEngine.Scopes:
		OpenID Connect Scopes.

		Scopes.REFRESH_TOKEN
			Scope for refresh token.

		Scopes.OPENID
			Scope for OpenID Information.

		Scopes.PROFILE
			Scope for Profile Information.

		Scopes.EMAIL
			Scope for Email address.
			
		Scopes.DEFAULT
			Scope used as default if no scopes are provided.

	cached_property AuthEngine.issuer
		Returns the issuer URL or None if the instance is unusable.

	cached_property AuthEngine.jwks_url
		Returns the JWKS URL or None if the instance is unusable.

	cached_property AuthEngine.token_endpoint
		Returns an instance of auth0.authentication.GetToken.

	cached_property AuthEngine.database_endpoint
		Returns an instance of auth0.authentication.Database.

	cached_property AuthEngine.passwordless_endpoint
		Returns an instance of auth0.authentication.Passwordless.

	cached_property AuthEngine.user_endpoint
		Returns an instance of auth0.authentication.Users.

	cached_property AuthEngine.verifier
		Returns an instance of AuthVerifierEngine initialized with issuer,
		jwks_url, and audience.

	These are all the methods AuthEngine object has:

	AuthEngine.__bool__()
		Determines if the instance is usable based on the availability of
		required information.

	AuthEngine.parse_response(response: str)
	AuthEngine.parse_response(response: dict[str, Any])
		Parse response received from different auth0 endpoints and return
		different types of AuthEngineResponse object including User and
		AuthEngineError. It also parse auth data stored in request's session
		cookies.
		
		If an id_token is present in response, it validates that using
		AuthVerifierEngine.verify. If the token is valid, an User object is
		constructed from the information of the id_token and returned. If the
		token is expired and a refresh_token exists in response, it refreshes
		the token by calling AuthEngine.refresh_token and return the response
		received from it. In case, the token is invalid and AuthEngineError is
		returned.

	AuthEngine.to_session(response)
		Converts a parsed response to a dictionary containing information
		including access_token, refresh_token, id_token, token_type, and
		expires_in for session storage.

		The dict is stored in auth session, which is parsed by
		AuthEngine.parse_response for authenticating subsequent requests.


	AuthEngine.set_session(request, response)
		Sets the authorization session in the HttpRequest object from dict
		returned by AuthEngine.to_session. The session is modified only if
		it's not the same as the existing session in the request.


	AuthEngine.signin(request, username, password, [scope, realm, audience,
	grant_type, forwarded_for, keep_signed_in])
		Signs in a user with username, password.

		Args:
			request (HttpRequest): Django HttpRequest

			username (str): Resource owner's identifier

			password (str): resource owner's Secret

			scope(str, optional): String value of the different scopes the
				client is asking for. Multiple scopes are separated with
				whitespace.

			realm (str, optional): String value of the realm the user belongs.
				Set this if you want to add realm support at this grant.

			audience (str, optional): The unique identifier of the target API
				you want to access.

			grant_type (str, optional): Denotes the flow you're using. For
				password realm use
				http://auth0.com/oauth/grant-type/password-realm

			forwarded_for (str, optional): End-user IP as a string value. Set
				this if you want brute-force protection to work in server-side
				scenarios. See
				https://auth0.com/docs/get-started/authentication-and-authorization-flow/avoid-common-issues-with-resource-owner-password-flow-and-attack-protection

			keep_signed_in (bool): Whether or not to fetch refresh token for
				refreshing access token next time.

		Upon authentication, it sets session in the request object and return a
		User object. Otherwise, an AuthEngineError object with error
		information is returned, request session is unchanged.

		Example:

		```
		from django_auth0_engine import AuthEngine
		
		user = AuthEngine().signin(
			request,
			username="user@company.com",
			password="pas$w4rd",
			realm=AuthEngine.USERNAME_PASSWORD_REALM,
			keep_signed_in=True,
		)
		if user:
			...
		else:
			...

		```

	AuthEngine.signin_code(request, code, redirect_uri)
		Signs in a user using the authorization code grant received from the
		identity providers such as Google, Facebook, X, and Microsoft.

		Upon parsing the response, it sets session in request and return a User
		object. Otherwise, an AuthEngineError object with error information is
		returned, request session is unchanged.

	AuthEngine.signup(request, email, password, [connection, username,
	user_metadata, given_name, family_name, name, nickname, picture, signin,
	keep_signed_in])
		This function allows you to sign up a user with their email address,
		password, and any additional information specified in your Auth0
		configuration. You can also choose to automatically sign the user in
		after successful signup.
		
		Args:
			request (HttpRequest): Django HttpRequest

			email (str): The user's email address.

			password (str): The user's desired password.

			connection (str): The name of the database connection where
				this user should be created. By default it uses the
				"Username-Password-Authentication" connection.

			username (str, optional): The user's username, if required by the
				database connection.

			user_metadata (dict, optional): Additional key-value information to
			store for the user. Some limitations apply, see:
			https://auth0.com/docs/metadata#metadata-restrictions

			given_name (str, optional): The user's given name(s).

			family_name (str, optional): The user's family name(s).

			name (str, optional): The user's full name.

			nickname (str, optional): The user's nickname.

			picture (str, optional): A URI pointing to the user's picture.

			signin (bool, optional): Whether to keep the user signed in or not.

			keep_signed_in (bool): Whether or not to fetch refresh token for
				refreshing access token next time. Has no effect if signin is
				not set.

		If the user is successfully signed up, a AuthEngineResponse is returned
		with a message. If the signin flag is set it keep the user signed in
		and return a User object and sets session cookie. If failed to sign
		up, an AuthEngineError object with error information is returned,
		request session is unchanged.

		Example:
		
		```
		from django_auth0_engine import AuthEngine
		
		created_user = AuthEngine().signup(
			request,
			email="user@company.com",
			password="pas$w4rd",
			connection=AuthEngine.USERNAME_PASSWORD_REALM,
		)
	
		if created_user:
			...
		else:
			...

		```

	AuthEngine.change_password(email, connection)
		Sends a password change email to the email address if a user with that
		email exists. An AuthEngineResponse object is returned with an
		appropriate message.

	AuthEngine.refresh_access_token(refresh_token, scope)
		Refreshes an access token using the refresh_token. Upon success, return
		a User object; an AuthEngineError object with error information is
		returned otherwise. It sets the token_refreshed flag in the response
		which is used by other function to decide whether or not to update
		session.

	AuthEngine.authenticate(request)
		Authenticates a request using the id_token. The id_token is retrieved
		from the session cookie. Upon successful authentication, it returns a
		User object representing the authenticated user; AuthEngineError
		otherwise. If token is expired and a refresh token exists in session
		cookie, if fetch new id token and access token and updates session cookie
		automatically.

	AuthEngine.authenticate_header(request)
		Functions similarly to AuthEngine.authenticate, except that the
		access_token is parsed from the request header instead of the session
		cookie. Returns User on successful authorization; AuthEngineError
		otherwise.

	AuthEngine.get_user(access_token)
		Exchanges the access_token for a User object. Returns User if
		successful; AuthEngineError otherwise.